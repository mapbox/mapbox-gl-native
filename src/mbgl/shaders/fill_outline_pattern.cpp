// NOTE: DO NOT CHANGE THIS FILE. IT IS AUTOMATICALLY GENERATED.

#include <mbgl/shaders/fill_outline_pattern.hpp>
#include <mbgl/util/compression.hpp>

#include <cstdint>

namespace mbgl {
namespace shaders {

const char* fill_outline_pattern::name = "fill_outline_pattern";
const char* fill_outline_pattern::vertexSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0xad, 0x93, 0xbd, 0x6e, 0x83, 0x30,
        0x14, 0x85, 0x77, 0x9e, 0xc2, 0x52, 0x17, 0xd2,
        0x22, 0x9a, 0x44, 0xd9, 0xa2, 0x0e, 0x5d, 0xaa,
        0x76, 0xe8, 0x8f, 0x5a, 0x75, 0xbe, 0x32, 0x60,
        0xa2, 0xab, 0x12, 0x1b, 0x19, 0x9b, 0x90, 0x56,
        0x7d, 0xf7, 0x5e, 0x03, 0x01, 0x52, 0x68, 0xb2,
        0x94, 0x05, 0x74, 0xee, 0x31, 0xe7, 0xb3, 0x39,
        0x58, 0x89, 0xa9, 0xd2, 0x5b, 0xb6, 0xe5, 0x66,
        0xc5, 0x2c, 0xd0, 0x4d, 0x63, 0xb5, 0xf6, 0x6c,
        0x2b, 0x97, 0x22, 0x5e, 0x92, 0xbc, 0x53, 0x3a,
        0x4b, 0x46, 0x6a, 0xce, 0x8d, 0x11, 0x5a, 0x42,
        0x81, 0x9f, 0x02, 0xf8, 0xe9, 0x71, 0x34, 0x1e,
        0x63, 0x25, 0x32, 0x88, 0x95, 0xd2, 0x09, 0xd8,
        0x3c, 0x17, 0xfa, 0xa4, 0x23, 0x53, 0xbb, 0xa1,
        0x23, 0xcd, 0x14, 0x37, 0x64, 0x29, 0x62, 0x9e,
        0x1d, 0x65, 0x1f, 0x0f, 0xa2, 0xf1, 0xc0, 0x20,
        0xe9, 0x24, 0x9a, 0x02, 0x8c, 0x6a, 0x22, 0x8a,
        0xb5, 0xe7, 0x11, 0xab, 0xc6, 0xc8, 0x1a, 0xd1,
        0x84, 0x73, 0xc8, 0x95, 0x93, 0x4b, 0xae, 0xf7,
        0x28, 0x37, 0x8d, 0x58, 0x3a, 0xd1, 0x85, 0x4d,
        0xa8, 0xd1, 0x94, 0x4a, 0x2f, 0xf0, 0x2e, 0x30,
        0x95, 0x89, 0x48, 0xd9, 0xfd, 0xed, 0x1b, 0xbc,
        0x3f, 0x3d, 0xdc, 0x3d, 0xbf, 0x3e, 0x82, 0x05,
        0x95, 0xf3, 0x18, 0xcd, 0xbe, 0xa3, 0xa3, 0xed,
        0xe5, 0x2d, 0x22, 0x3f, 0x0c, 0xc1, 0xac, 0x07,
        0x58, 0xb5, 0xa3, 0x65, 0x6b, 0x0d, 0x7d, 0xe4,
        0x60, 0x79, 0x37, 0xbb, 0xa0, 0x8d, 0x89, 0xa9,
        0x00, 0x0b, 0x03, 0x8f, 0x4c, 0x30, 0x25, 0xca,
        0x52, 0x61, 0x42, 0x1d, 0x40, 0xe9, 0xcf, 0xd8,
        0x97, 0xc7, 0xe8, 0x3a, 0x03, 0xee, 0x2c, 0xed,
        0x33, 0xbb, 0x61, 0x56, 0xd2, 0xe3, 0x07, 0x6c,
        0xb1, 0x02, 0x87, 0xe8, 0x77, 0x88, 0xc1, 0x70,
        0x3b, 0xb3, 0x03, 0x94, 0x5b, 0x3c, 0x46, 0x76,
        0xef, 0x99, 0x40, 0x73, 0xe6, 0x4d, 0x06, 0x2f,
        0xaa, 0x40, 0x83, 0x4a, 0xd6, 0xae, 0xa6, 0xa6,
        0xec, 0xd2, 0x1d, 0xc8, 0xca, 0xaf, 0x3f, 0x56,
        0xc0, 0xe6, 0x01, 0x5b, 0x50, 0x44, 0xbd, 0xa0,
        0xfd, 0x54, 0x64, 0xde, 0x08, 0xd3, 0x35, 0x91,
        0x34, 0x7f, 0xa2, 0x78, 0xc1, 0x54, 0xd7, 0x82,
        0xbe, 0x5d, 0x94, 0xf3, 0xbb, 0xec, 0xc1, 0x1f,
        0x4d, 0x0a, 0x9a, 0xe6, 0x10, 0x46, 0x4f, 0x11,
        0xfd, 0x0b, 0x45, 0x34, 0xa6, 0x88, 0xce, 0x53,
        0xf4, 0x18, 0x04, 0xe1, 0x0f, 0x8e, 0x31, 0xac,
        0xf6, 0xec, 0x7a, 0x78, 0xae, 0xe1, 0x8e, 0x5d,
        0xb1, 0x45, 0x38, 0x9f, 0x91, 0xbc, 0x0c, 0xe7,
        0x75, 0x5a, 0xfb, 0xdb, 0x7f, 0x7b, 0x3f, 0xaa,
        0x6d, 0x77, 0x06
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();
const char* fill_outline_pattern::fragmentSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x7d, 0x53, 0x4b, 0x6f, 0xdb, 0x30,
        0x0c, 0xbe, 0xfb, 0x57, 0x10, 0xe8, 0xc5, 0x29,
        0xbc, 0x24, 0x35, 0x76, 0x0b, 0x7a, 0x28, 0x9a,
        0x16, 0xeb, 0x61, 0xcd, 0x90, 0xee, 0x71, 0x14,
        0x64, 0x5b, 0x76, 0x04, 0xc8, 0xa2, 0x21, 0xcb,
        0x59, 0xb2, 0x61, 0xff, 0x7d, 0x94, 0xa5, 0xda,
        0xcb, 0xe2, 0xc4, 0x47, 0xf2, 0x7b, 0x91, 0x94,
        0x3b, 0x2d, 0x4b, 0x34, 0x35, 0xec, 0x45, 0x9e,
        0x42, 0xc7, 0x1a, 0x6e, 0xad, 0x30, 0x9a, 0x59,
        0xc5, 0xf8, 0x2a, 0xea, 0xa6, 0x9b, 0x99, 0xb9,
        0xd2, 0x24, 0x66, 0x76, 0x8d, 0x79, 0xde, 0xb4,
        0xe2, 0xd0, 0xca, 0x5f, 0x62, 0xac, 0x97, 0x0a,
        0xb9, 0xa5, 0x46, 0x2d, 0x0f, 0xab, 0x68, 0xa8,
        0xb6, 0xbc, 0x6e, 0x94, 0x30, 0xe9, 0x9a, 0x3a,
        0xb2, 0xe6, 0x15, 0x11, 0xa2, 0x3d, 0x37, 0x47,
        0xa9, 0x2b, 0xaf, 0xb4, 0x67, 0x0d, 0xb6, 0x2e,
        0xd9, 0x44, 0x35, 0x9b, 0xaa, 0x92, 0x40, 0x74,
        0x23, 0x4b, 0x5d, 0x88, 0x12, 0x3e, 0x3d, 0xbc,
        0xb1, 0x6f, 0xaf, 0x2f, 0xcf, 0x9b, 0xed, 0x67,
        0xd6, 0x31, 0x6c, 0x78, 0x2e, 0xed, 0x71, 0xe0,
        0x28, 0xfc, 0xd9, 0x84, 0x58, 0xa1, 0xb5, 0x8a,
        0x6e, 0x84, 0x6a, 0xc5, 0x90, 0xee, 0x1f, 0xc4,
        0x40, 0x77, 0x18, 0x5d, 0xc8, 0x92, 0x6c, 0xf6,
        0x28, 0x0b, 0xa8, 0xb9, 0xd4, 0xf1, 0x0c, 0x7e,
        0x47, 0x40, 0x9f, 0x73, 0xbe, 0x6c, 0xec, 0x10,
        0xe7, 0xa6, 0x70, 0x3f, 0x29, 0xee, 0xc0, 0xfd,
        0x54, 0xfd, 0x5a, 0x72, 0x44, 0x53, 0x10, 0xb2,
        0xc6, 0x22, 0x0e, 0x2b, 0x49, 0xe0, 0x6e, 0xbe,
        0x9c, 0xad, 0x46, 0x20, 0x55, 0x1d, 0x42, 0x1e,
        0xe2, 0xd3, 0x93, 0xc3, 0x62, 0xbc, 0x47, 0xf2,
        0xdf, 0xc5, 0x4f, 0x7b, 0xa3, 0xd5, 0xa8, 0xfb,
        0x11, 0x72, 0x54, 0x68, 0xee, 0x48, 0x9a, 0x70,
        0xb6, 0x33, 0x22, 0x5d, 0xc7, 0xe1, 0x58, 0x89,
        0xf3, 0x24, 0xe8, 0x54, 0x58, 0x96, 0x9d, 0xc4,
        0xcd, 0xa6, 0xe2, 0xa6, 0x53, 0x79, 0xb3, 0x2b,
        0x79, 0xb3, 0x4b, 0x79, 0x59, 0x76, 0x96, 0x38,
        0xbd, 0x98, 0x38, 0x7d, 0x8f, 0xbc, 0x58, 0x40,
        0x29, 0x75, 0x01, 0x85, 0x6c, 0x2d, 0xd7, 0xb9,
        0x00, 0x8b, 0x80, 0x9d, 0x55, 0x52, 0x0b, 0xa0,
        0x07, 0x00, 0x5c, 0x35, 0x3b, 0x0e, 0x52, 0x93,
        0x7d, 0x83, 0x8a, 0x5b, 0x89, 0xda, 0x13, 0xfd,
        0x01, 0x1d, 0x8d, 0x4c, 0x94, 0xd0, 0x95, 0xdd,
        0xf9, 0x39, 0xe1, 0x03, 0x54, 0x8a, 0x3d, 0x1b,
        0x5e, 0x3d, 0xba, 0x58, 0xf3, 0xc3, 0x31, 0xe4,
        0xf2, 0x0c, 0x2f, 0x78, 0xef, 0x56, 0x41, 0xc8,
        0xb6, 0x46, 0xb4, 0xbb, 0xd6, 0x8a, 0x26, 0x5e,
        0xce, 0x97, 0xfd, 0x82, 0x92, 0x5e, 0xd4, 0xe5,
        0xeb, 0x59, 0x83, 0x16, 0xcd, 0x13, 0x76, 0xe5,
        0xaf, 0x91, 0x84, 0x19, 0x13, 0xff, 0x47, 0xcd,
        0xe0, 0x36, 0x68, 0xdf, 0x8e, 0x6f, 0xf9, 0xfd,
        0x31, 0x6e, 0xbe, 0x3f, 0x6d, 0xd7, 0xdb, 0x87,
        0x1f, 0xec, 0xe5, 0xf5, 0xed, 0xcb, 0xd3, 0xe3,
        0xd7, 0xcd, 0x76, 0x4a, 0xdb, 0x2d, 0x2e, 0xf6,
        0x27, 0x0a, 0x6f, 0xf0, 0x4f, 0xf4, 0x17, 0x5b,
        0x20, 0x6a, 0x67
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();

} // namespace shaders
} // namespace mbgl
