// NOTE: DO NOT CHANGE THIS FILE. IT IS AUTOMATICALLY GENERATED.

#include <mbgl/shaders/fill.hpp>
#include <mbgl/util/compression.hpp>

#include <cstdint>

namespace mbgl {
namespace shaders {

const char* fill::name = "fill";
const char* fill::vertexSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x7d, 0x92, 0x3f, 0x4f, 0xc3, 0x30,
        0x10, 0xc5, 0x77, 0x7f, 0x8a, 0x93, 0xba, 0xa4,
        0x28, 0x03, 0x54, 0xdd, 0x22, 0x06, 0x16, 0x04,
        0x03, 0x7f, 0x04, 0x62, 0x3e, 0x99, 0x24, 0x4e,
        0x4f, 0x24, 0x76, 0x94, 0xd8, 0xa1, 0x15, 0xe2,
        0xbb, 0x63, 0x07, 0xc7, 0x75, 0x1a, 0xa8, 0x17,
        0x5b, 0x7e, 0xef, 0xee, 0x9e, 0x7f, 0x32, 0xd7,
        0xba, 0xa3, 0x77, 0xa3, 0x4b, 0x18, 0xca, 0x7c,
        0x03, 0x1c, 0x5b, 0xd5, 0x67, 0x8c, 0x19, 0x49,
        0x42, 0x75, 0x0d, 0x34, 0x5c, 0x6f, 0xc1, 0xa0,
        0xdd, 0x3a, 0xda, 0xdb, 0x7b, 0xb6, 0x22, 0x21,
        0x8b, 0x52, 0xc0, 0xdd, 0xcd, 0x2b, 0xbe, 0x3d,
        0xde, 0xdf, 0x3e, 0xbd, 0x3c, 0xa0, 0xc1, 0x5c,
        0xd5, 0xaa, 0x0b, 0x45, 0xb5, 0xfa, 0x6c, 0x41,
        0xd4, 0x8a, 0x6b, 0xdb, 0x6f, 0x94, 0x50, 0x67,
        0x8c, 0x87, 0x49, 0x3b, 0xaa, 0x76, 0xad, 0x9b,
        0xb7, 0x9d, 0xf4, 0x8c, 0x0d, 0xbc, 0x3b, 0x90,
        0xac, 0x62, 0xcd, 0x2b, 0xab, 0xb2, 0xee, 0xcb,
        0xd0, 0x3b, 0xd2, 0x0d, 0x06, 0x87, 0x2c, 0x48,
        0xfc, 0x1b, 0x4e, 0xb5, 0x3c, 0x27, 0x7d, 0xf8,
        0x3b, 0x9e, 0x17, 0xe7, 0x01, 0x47, 0x87, 0xe7,
        0xe1, 0x0d, 0xc7, 0x84, 0x51, 0x79, 0xd0, 0xe6,
        0x19, 0x23, 0x87, 0xc1, 0xc8, 0xe3, 0x53, 0x0e,
        0x8a, 0x0a, 0x0b, 0x96, 0x64, 0xb2, 0x86, 0x2f,
        0x06, 0x76, 0x9d, 0xa5, 0xea, 0x0c, 0xe3, 0x09,
        0xae, 0xc1, 0x48, 0xdb, 0xed, 0x03, 0x1b, 0xda,
        0xa3, 0x43, 0x90, 0x78, 0x7c, 0xe9, 0x91, 0xf3,
        0x7a, 0x0a, 0xe3, 0xca, 0x4e, 0x61, 0xba, 0x0e,
        0xa7, 0xd0, 0xce, 0xcc, 0x9f, 0xc0, 0x39, 0x8b,
        0x3f, 0x2f, 0x32, 0x6c, 0x92, 0x80, 0x28, 0x8d,
        0x71, 0xce, 0x72, 0x2c, 0x91, 0x8d, 0x49, 0x96,
        0x68, 0x9c, 0xb9, 0xaa, 0xf1, 0x59, 0xf5, 0xa4,
        0x49, 0xc9, 0xd1, 0xf5, 0xfb, 0xf7, 0xe0, 0x02,
        0xfc, 0x8b, 0xed, 0x07, 0x4d, 0xe1, 0x32, 0x85,
        0x2b, 0x3b, 0xe2, 0x9b, 0xfd, 0x00, 0x83, 0x90,
        0xec, 0xfc
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();
const char* fill::fragmentSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x75, 0x8f, 0x4f, 0x0b, 0x82, 0x40,
        0x14, 0xc4, 0xef, 0xef, 0x53, 0x3c, 0xf0, 0x62,
        0x1d, 0xa2, 0xa0, 0x5b, 0x74, 0x10, 0x4b, 0xf2,
        0x50, 0x86, 0xf6, 0xe7, 0xb8, 0x2c, 0xea, 0xea,
        0xc2, 0xb6, 0x2b, 0xa6, 0x46, 0x44, 0xdf, 0xbd,
        0xb6, 0xcc, 0x24, 0xed, 0x5d, 0x67, 0xe6, 0xfd,
        0x66, 0xc0, 0xe0, 0x4c, 0x46, 0x31, 0xc3, 0x95,
        0x15, 0x90, 0xfd, 0xc6, 0x75, 0x3c, 0x7f, 0x4d,
        0x4a, 0x12, 0x2a, 0xa1, 0x72, 0xa8, 0x68, 0x7e,
        0xe5, 0x32, 0xc1, 0x94, 0x27, 0x69, 0x86, 0x55,
        0x1c, 0x4e, 0xf1, 0x25, 0xcc, 0xc0, 0x88, 0xc5,
        0x39, 0x86, 0x52, 0x72, 0xa6, 0xf2, 0x53, 0x5b,
        0xaf, 0xa3, 0xda, 0x21, 0x23, 0xce, 0x00, 0xa0,
        0x1f, 0xa0, 0x32, 0x1a, 0xf2, 0xe2, 0xda, 0x20,
        0x84, 0xba, 0x64, 0xc8, 0x84, 0xa2, 0x05, 0xd6,
        0xd2, 0x2f, 0xa4, 0xe5, 0x68, 0xe2, 0x2d, 0x4c,
        0xa5, 0x78, 0x84, 0x27, 0xca, 0xa5, 0x39, 0xc0,
        0x1b, 0xe0, 0xf3, 0x34, 0xf9, 0xdf, 0x32, 0xad,
        0xff, 0xae, 0xc2, 0x79, 0xb7, 0xfd, 0xff, 0x3f,
        0x9f, 0x01, 0xda, 0xd1, 0x2d, 0xff, 0xfa, 0xd5,
        0x2d, 0xa9, 0xcd, 0x89, 0x20, 0x4e, 0x4e, 0x13,
        0xbb, 0x46, 0xbe, 0xd1, 0xc3, 0xef, 0xea, 0x0f,
        0xce, 0x3b, 0x2c, 0xfd, 0x85, 0x6f, 0x1d, 0x89,
        0xbb, 0x09, 0xb6, 0x4b, 0x7b, 0xe7, 0xf9, 0x7d,
        0x71, 0x5d, 0xdf, 0x9c, 0x8c, 0xc6, 0x83, 0x86,
        0x72, 0x87, 0x07, 0x0d, 0x6b, 0x96, 0x59
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();

} // namespace shaders
} // namespace mbgl
