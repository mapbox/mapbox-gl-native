// NOTE: DO NOT CHANGE THIS FILE. IT IS AUTOMATICALLY GENERATED.

#include <mbgl/shaders/symbol_icon.hpp>
#include <mbgl/util/compression.hpp>

#include <cstdint>

namespace mbgl {
namespace shaders {

const char* symbol_icon::name = "symbol_icon";
const char* symbol_icon::vertexSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0xad, 0x57, 0x4b, 0x8f, 0xdb, 0x36,
        0x10, 0xbe, 0xfb, 0x57, 0x4c, 0x10, 0x20, 0x90,
        0xbc, 0x7e, 0xdb, 0x9b, 0x76, 0x63, 0x6c, 0x17,
        0xbd, 0x14, 0xcd, 0x21, 0xad, 0xd1, 0x45, 0x4f,
        0x8b, 0x80, 0xa0, 0x25, 0xca, 0x66, 0x2b, 0x89,
        0x82, 0x44, 0xf9, 0xb1, 0x45, 0xfe, 0x7b, 0x87,
        0xa4, 0x4c, 0x51, 0x92, 0xe5, 0x6c, 0x81, 0xfa,
        0x20, 0xcb, 0xe4, 0xbc, 0xe7, 0x9b, 0x8f, 0x74,
        0x20, 0xd2, 0x42, 0x42, 0x14, 0x0b, 0x2a, 0x61,
        0xf3, 0x19, 0x1e, 0x61, 0x39, 0x99, 0xaf, 0xe6,
        0xf7, 0x0f, 0x8b, 0x8f, 0xf7, 0xcb, 0xfb, 0x1f,
        0x1f, 0x7e, 0x78, 0x58, 0xae, 0x07, 0x03, 0x2a,
        0x65, 0xce, 0xb7, 0xa5, 0x64, 0x70, 0x60, 0xc1,
        0x0a, 0x28, 0xc9, 0x44, 0x41, 0x44, 0x14, 0x15,
        0x4c, 0xae, 0xbb, 0x9b, 0x21, 0x95, 0xb4, 0xb5,
        0xbc, 0x54, 0x3a, 0xb9, 0xf8, 0x8b, 0x05, 0x92,
        0x85, 0x4a, 0xdb, 0xdd, 0x37, 0xce, 0x29, 0x89,
        0x68, 0xc8, 0x88, 0xc8, 0x68, 0xc0, 0xe5, 0x19,
        0x9d, 0x96, 0x29, 0x8f, 0x44, 0x9e, 0xc0, 0x56,
        0x88, 0x18, 0x4a, 0xc2, 0x0b, 0x52, 0xf0, 0x57,
        0x46, 0x5e, 0x85, 0x48, 0x48, 0xa0, 0xa2, 0xa6,
        0x29, 0x7a, 0xef, 0x91, 0x8a, 0x18, 0x95, 0x65,
        0xce, 0xae, 0x08, 0xee, 0xf9, 0x6e, 0x9f, 0x55,
        0x3e, 0x4b, 0x23, 0x2c, 0xd7, 0x30, 0x9d, 0x42,
        0x59, 0xb0, 0x10, 0xa4, 0x00, 0x9e, 0x4a, 0x96,
        0x67, 0x22, 0xa6, 0x18, 0xda, 0x96, 0xc9, 0x23,
        0x63, 0x29, 0x28, 0xa7, 0x50, 0x48, 0x91, 0x15,
        0x70, 0xdc, 0xe3, 0x6f, 0xa5, 0x06, 0xbc, 0x00,
        0x0a, 0x81, 0x48, 0x30, 0x1d, 0xae, 0xd2, 0x28,
        0xd3, 0x40, 0x72, 0x91, 0xde, 0xf0, 0x54, 0xfb,
        0x69, 0x58, 0xd9, 0x0a, 0xb9, 0x37, 0x2e, 0x68,
        0x1a, 0x42, 0x15, 0x3a, 0x5c, 0x42, 0xef, 0xb1,
        0x17, 0xd0, 0x84, 0xe5, 0x94, 0x48, 0x41, 0x02,
        0xa6, 0x22, 0x26, 0x21, 0x57, 0xe2, 0x01, 0xeb,
        0x4b, 0x35, 0xe3, 0x32, 0xd8, 0x77, 0x0a, 0x96,
        0x0b, 0x89, 0x89, 0x92, 0xe2, 0x9c, 0x6c, 0x45,
        0xdc, 0xa7, 0x4a, 0x8b, 0x0c, 0x3b, 0x47, 0x72,
        0x8a, 0xf9, 0xd5, 0x32, 0x97, 0x5d, 0xdd, 0xb7,
        0x60, 0x4f, 0xd3, 0x1d, 0xfa, 0x1e, 0x0c, 0xde,
        0xf3, 0x28, 0x0d, 0x59, 0x04, 0xbf, 0xfe, 0xfc,
        0x4c, 0xfe, 0xfc, 0xed, 0xf3, 0x2f, 0xbf, 0xff,
        0xf1, 0x85, 0x94, 0x97, 0xbe, 0x5a, 0xe5, 0x58,
        0x1c, 0x33, 0xdb, 0xf9, 0x6a, 0x93, 0x34, 0xd0,
        0xa4, 0x25, 0x10, 0x3b, 0x8b, 0x5a, 0x60, 0x3d,
        0x38, 0xd0, 0xfc, 0xcc, 0xd3, 0x9d, 0xab, 0x6e,
        0xf7, 0xde, 0xb3, 0xb8, 0x60, 0xd7, 0x1c, 0x94,
        0xc4, 0x91, 0x49, 0x43, 0x1e, 0x0d, 0x6a, 0x74,
        0x25, 0x54, 0xae, 0x50, 0x00, 0xbf, 0x72, 0x7e,
        0x5a, 0xb7, 0x97, 0x63, 0xba, 0x65, 0x31, 0xc9,
        0x62, 0x9a, 0xb2, 0x3e, 0x91, 0x5d, 0x8c, 0x20,
        0x13, 0x79, 0x68, 0xf7, 0xaf, 0x40, 0x52, 0xb2,
        0x53, 0x17, 0xaa, 0xba, 0x1f, 0xe4, 0xc8, 0xe5,
        0x1e, 0x55, 0x33, 0x47, 0x4f, 0xe7, 0x5c, 0x2a,
        0x25, 0x8d, 0x99, 0x81, 0x4d, 0x5a, 0x6f, 0x1c,
        0xd4, 0x46, 0x5d, 0x08, 0x93, 0xe1, 0xa1, 0x3d,
        0x3c, 0x07, 0xc1, 0x43, 0x8c, 0x90, 0xa7, 0x9e,
        0x0f, 0xff, 0x0c, 0x00, 0x3f, 0xdf, 0xe9, 0x8b,
        0x12, 0xa9, 0xde, 0x91, 0x04, 0xca, 0x14, 0x5f,
        0xff, 0x26, 0x09, 0x3f, 0x11, 0xe5, 0xd4, 0xb3,
        0x1d, 0x18, 0xb9, 0xdd, 0xf2, 0x2f, 0x35, 0x57,
        0xca, 0xdd, 0x8e, 0x28, 0x3b, 0x57, 0x2a, 0xaf,
        0x84, 0xab, 0xb6, 0xe2, 0xe4, 0xa0, 0x90, 0x4b,
        0x27, 0x93, 0x13, 0x8a, 0x3a, 0x12, 0x66, 0xb5,
        0x2d, 0xf4, 0x7a, 0x5c, 0x37, 0xec, 0x60, 0x45,
        0xb4, 0x88, 0x62, 0x9e, 0xb6, 0x05, 0x3d, 0x64,
        0x76, 0xd3, 0x6a, 0xba, 0x00, 0x2f, 0xd8, 0x2e,
        0xc1, 0x19, 0x22, 0x88, 0xe0, 0x58, 0xc9, 0x8e,
        0x5b, 0x64, 0xf5, 0xb2, 0xf8, 0x5a, 0x69, 0x55,
        0xf2, 0xba, 0x2d, 0xea, 0x37, 0x8f, 0xc0, 0x7b,
        0xd7, 0xc3, 0x4d, 0xf0, 0xe1, 0x03, 0xbc, 0xeb,
        0x67, 0xa4, 0x4b, 0x5f, 0xd4, 0xa7, 0x8a, 0x11,
        0xcb, 0xed, 0x99, 0x80, 0x5f, 0x66, 0x5f, 0x47,
        0x55, 0xec, 0x2f, 0x73, 0x7c, 0xbd, 0x10, 0x95,
        0x0f, 0x53, 0x98, 0xcf, 0x26, 0x33, 0xe3, 0xfd,
        0x1b, 0xa8, 0xea, 0xeb, 0x20, 0xfe, 0xb7, 0x18,
        0xac, 0xff, 0x3e, 0x4f, 0xb7, 0xd2, 0xfd, 0x4f,
        0x9e, 0x2a, 0x4a, 0x74, 0xed, 0xdf, 0x96, 0xb1,
        0x2d, 0x5f, 0x81, 0x6d, 0xcf, 0x46, 0x20, 0x5d,
        0x6b, 0x41, 0x33, 0x7e, 0x30, 0xd4, 0x02, 0x9e,
        0x86, 0xcb, 0x08, 0x66, 0x23, 0x98, 0xfb, 0xeb,
        0x4e, 0xc3, 0x6b, 0xee, 0x44, 0xc2, 0xdc, 0x8b,
        0x9a, 0x3b, 0xd1, 0x52, 0xd3, 0xf4, 0xe4, 0x68,
        0xb4, 0x91, 0xb7, 0x9f, 0x99, 0xe2, 0xe4, 0x44,
        0x21, 0xa5, 0xc0, 0x43, 0x02, 0x0c, 0x65, 0x92,
        0x22, 0x8c, 0x26, 0x07, 0x96, 0x23, 0x04, 0x3b,
        0x6e, 0x2e, 0x56, 0x0d, 0x71, 0xea, 0x28, 0x9b,
        0x43, 0x0f, 0x4f, 0x36, 0xe1, 0xfe, 0x90, 0xa6,
        0xb7, 0xc8, 0x1e, 0x3e, 0x59, 0x0b, 0xb7, 0xa4,
        0xa6, 0xfd, 0xf6, 0xbb, 0xd5, 0xc9, 0x58, 0xae,
        0xf9, 0x9e, 0x1f, 0xea, 0xc8, 0x83, 0x98, 0x26,
        0x99, 0x67, 0x7d, 0xa9, 0xcf, 0x6c, 0x72, 0x0f,
        0x77, 0xfa, 0x39, 0x6c, 0x65, 0x3a, 0x6a, 0xc9,
        0x61, 0x17, 0xb0, 0x7e, 0x9b, 0x9c, 0x1d, 0x74,
        0xed, 0x04, 0x96, 0x4b, 0xb5, 0x35, 0x84, 0x94,
        0xd1, 0x7c, 0x1c, 0x71, 0x16, 0x87, 0x55, 0x35,
        0x75, 0x61, 0x75, 0x8d, 0x58, 0x38, 0x55, 0x72,
        0x0a, 0x62, 0xea, 0x58, 0xe6, 0x31, 0x2b, 0x1a,
        0x56, 0x57, 0x93, 0x99, 0x5f, 0x0d, 0xa5, 0xc6,
        0xca, 0xf0, 0xb1, 0x1b, 0x77, 0x63, 0x68, 0x23,
        0x91, 0xca, 0xe7, 0x80, 0xc6, 0x06, 0x56, 0x15,
        0x29, 0xc3, 0x93, 0xd1, 0x9e, 0xc2, 0x02, 0x0d,
        0xc2, 0xa7, 0x6a, 0xb4, 0xbb, 0x0c, 0x61, 0x7a,
        0xad, 0x0f, 0x4b, 0x3c, 0xe2, 0xd1, 0x84, 0x1d,
        0x0d, 0x33, 0x7d, 0x8d, 0x63, 0xd4, 0x05, 0xfb,
        0x9b, 0x81, 0x63, 0xb1, 0x6d, 0x38, 0x6e, 0xf3,
        0x26, 0x84, 0x63, 0x03, 0x34, 0x3f, 0xcf, 0x11,
        0xea, 0xbe, 0x85, 0xbb, 0x6b, 0x0f, 0x29, 0xb0,
        0x0b, 0xea, 0xd3, 0x19, 0x33, 0xbe, 0x0e, 0x74,
        0xab, 0xb6, 0x45, 0xb5, 0x6b, 0xa1, 0x18, 0xe5,
        0xab, 0x3b, 0x47, 0xc7, 0x75, 0xb7, 0x62, 0x48,
        0xbf, 0xa9, 0xe7, 0x6d, 0x27, 0x67, 0x18, 0x03,
        0x9d, 0x9c, 0x7d, 0x0d, 0x6c, 0xf7, 0x66, 0x31,
        0x82, 0xed, 0xe4, 0xa4, 0x37, 0x4f, 0x7e, 0x63,
        0xe4, 0xdd, 0x4e, 0x68, 0x8e, 0x46, 0x56, 0x50,
        0x16, 0xf1, 0xe9, 0x35, 0xb9, 0xfb, 0xae, 0xed,
        0xf7, 0xca, 0xf0, 0x1b, 0x0b, 0x81, 0x3e, 0x7a,
        0xf0, 0xf9, 0x46, 0x0b, 0x58, 0xfc, 0x05, 0x5c,
        0xd6, 0x2e, 0xad, 0x78, 0xd4, 0xcb, 0x9e, 0xb5,
        0x38, 0x82, 0xf1, 0x1c, 0x61, 0x34, 0xac, 0xa3,
        0x1c, 0x75, 0x5f, 0x51, 0xce, 0x5f, 0x5f, 0xe3,
        0xb2, 0xea, 0x38, 0xbc, 0x76, 0xeb, 0x70, 0x9a,
        0xee, 0x4a, 0x63, 0x2f, 0x46, 0x66, 0xbe, 0xe6,
        0x7a, 0x1c, 0x94, 0x4d, 0xbc, 0x8f, 0x6c, 0xd4,
        0x85, 0xd4, 0x14, 0xbd, 0x73, 0x3f, 0xb9, 0x58,
        0x6a, 0xdb, 0x71, 0x01, 0xa1, 0x97, 0x8e, 0x58,
        0x8a, 0x76, 0xbe, 0x43, 0xf0, 0xec, 0x91, 0x3c,
        0x85, 0xe5, 0x42, 0xe7, 0x6a, 0x07, 0xcb, 0x6f,
        0xc4, 0x62, 0x12, 0xb4, 0x47, 0xb3, 0xfa, 0x9e,
        0xba, 0xb7, 0x1a, 0x0b, 0x34, 0xf7, 0xe6, 0x52,
        0x5f, 0x3d, 0xaa, 0x05, 0xaf, 0xf9, 0xb7, 0xa0,
        0xca, 0xb1, 0x9a, 0xe8, 0xfa, 0xde, 0x89, 0x7a,
        0xae, 0x18, 0x9e, 0x99, 0xf0, 0x93, 0xa6, 0xa6,
        0xa7, 0xe6, 0xfd, 0x14, 0x27, 0x7c, 0xdc, 0xba,
        0xb0, 0x9a, 0x30, 0x5b, 0x41, 0x24, 0xf4, 0xe4,
        0xe9, 0x5c, 0x12, 0x84, 0xd8, 0x5c, 0xbd, 0x34,
        0xcc, 0xe3, 0xe9, 0x78, 0xe7, 0xba, 0xf7, 0x31,
        0xae, 0x6f, 0x83, 0x7f, 0x01, 0xca, 0xcb, 0x70,
        0xe8
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();
const char* symbol_icon::fragmentSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x75, 0x90, 0xcb, 0x6e, 0xc2, 0x30,
        0x10, 0x45, 0xf7, 0xf3, 0x15, 0x23, 0xb1, 0x49,
        0xaa, 0xaa, 0xa2, 0x51, 0x77, 0x51, 0x17, 0x88,
        0x80, 0x60, 0x51, 0x82, 0x42, 0x1f, 0x4b, 0xcb,
        0x22, 0x76, 0x6a, 0xc9, 0xb1, 0x23, 0x13, 0x9b,
        0xa2, 0xaa, 0xff, 0x5e, 0xbb, 0x24, 0x29, 0xe2,
        0xe1, 0xa5, 0x7d, 0xee, 0xf5, 0x99, 0xb1, 0x4a,
        0x70, 0x6d, 0x6a, 0xdc, 0xd1, 0xba, 0x91, 0xcc,
        0x24, 0x19, 0x5a, 0xd2, 0xb2, 0xaf, 0xd6, 0x1a,
        0x96, 0x02, 0xc0, 0x48, 0x70, 0x55, 0x32, 0x8e,
        0x8b, 0xc9, 0x86, 0xbc, 0xad, 0x96, 0xf3, 0xbc,
        0x78, 0x21, 0x96, 0xe8, 0x86, 0x6e, 0x45, 0x7b,
        0x00, 0x47, 0xcd, 0x41, 0xa8, 0x0a, 0xa5, 0xde,
        0x37, 0xc8, 0xa5, 0xa6, 0x2d, 0x76, 0x4f, 0x29,
        0x8c, 0x98, 0xdc, 0x31, 0xb0, 0x5d, 0xfd, 0x09,
        0x31, 0xc4, 0x03, 0xa3, 0x4a, 0xc1, 0xfd, 0x37,
        0x7d, 0x91, 0x63, 0xdb, 0x04, 0x5d, 0x10, 0x48,
        0x87, 0xbb, 0x63, 0xca, 0x11, 0x4e, 0x4b, 0xf6,
        0x1f, 0x05, 0xa7, 0x45, 0x89, 0x35, 0x15, 0x2a,
        0x8a, 0xf1, 0x1b, 0xd0, 0x9f, 0x20, 0x7b, 0xdb,
        0x35, 0x10, 0x97, 0x9e, 0xf8, 0x7c, 0xd5, 0xe7,
        0x0c, 0xa6, 0xb2, 0xf9, 0xa4, 0x1e, 0xed, 0x43,
        0x77, 0x17, 0x3a, 0x21, 0x50, 0x49, 0x32, 0x37,
        0xb4, 0x9a, 0x6a, 0xa9, 0x8d, 0x87, 0xbb, 0x2d,
        0x26, 0x59, 0x34, 0x6c, 0xf4, 0xfe, 0x38, 0x5b,
        0xec, 0x0b, 0xfe, 0x2a, 0x53, 0xe8, 0x9d, 0xf3,
        0xf7, 0x59, 0x91, 0x15, 0x93, 0x0f, 0xb2, 0x5c,
        0x6d, 0xd6, 0xb3, 0xe9, 0x6b, 0x5e, 0x5c, 0xab,
        0xf4, 0xeb, 0x79, 0x8a, 0x1e, 0x1f, 0xc6, 0xf1,
        0xa0, 0xfa, 0x03, 0xbf, 0x04, 0x34, 0x94, 0x99
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();

} // namespace shaders
} // namespace mbgl
