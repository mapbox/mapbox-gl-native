// NOTE: DO NOT CHANGE THIS FILE. IT IS AUTOMATICALLY GENERATED.

#include <mbgl/shaders/collision_box.hpp>
#include <mbgl/util/compression.hpp>

#include <cstdint>

namespace mbgl {
namespace shaders {

const char* collision_box::name = "collision_box";
const char* collision_box::vertexSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x7d, 0x52, 0xcb, 0x6e, 0xc2, 0x30,
        0x10, 0xbc, 0xe7, 0x2b, 0xf6, 0xc8, 0xab, 0x09,
        0x54, 0xf4, 0x14, 0xf1, 0x0f, 0x5c, 0x7a, 0xb6,
        0x8c, 0xb3, 0xc0, 0x56, 0x8e, 0x37, 0xb2, 0x9d,
        0x10, 0xa8, 0xfa, 0xef, 0x5d, 0xd2, 0x10, 0x28,
        0x02, 0x7c, 0x48, 0xe4, 0x9d, 0x99, 0xdd, 0xf1,
        0x68, 0x75, 0x8c, 0x9e, 0x36, 0x75, 0x44, 0x68,
        0xd0, 0xbc, 0x83, 0x56, 0x15, 0x87, 0x3c, 0xd1,
        0xf7, 0x55, 0xed, 0xcc, 0x9e, 0xfd, 0x13, 0x10,
        0xdb, 0xe8, 0xeb, 0x02, 0x1f, 0x20, 0x95, 0xd5,
        0x06, 0x8b, 0x3c, 0x49, 0x6a, 0x47, 0x5b, 0xf6,
        0x25, 0x94, 0x3a, 0x2e, 0xa1, 0x56, 0xf2, 0xf3,
        0xd4, 0xe6, 0x43, 0xb9, 0xa3, 0xd7, 0x97, 0x46,
        0x2a, 0x18, 0x6d, 0xf1, 0x8a, 0x6e, 0x2d, 0xeb,
        0x28, 0xb0, 0xd1, 0x25, 0x7a, 0xad, 0x22, 0x2b,
        0x83, 0x2e, 0xa2, 0x57, 0x05, 0x85, 0x28, 0xce,
        0x84, 0x9a, 0x34, 0xda, 0x1f, 0xc9, 0xed, 0x7a,
        0x6e, 0x33, 0x4c, 0xbe, 0xaf, 0x3b, 0x8e, 0x9f,
        0xa1, 0xb3, 0xd4, 0x30, 0x15, 0xe2, 0x87, 0xdc,
        0x68, 0x0c, 0xdf, 0x09, 0xc8, 0x11, 0x17, 0x4b,
        0xa8, 0x3c, 0x7f, 0xa1, 0x89, 0x58, 0xac, 0x99,
        0x5c, 0x84, 0xd5, 0xe0, 0x16, 0x26, 0x1d, 0x61,
        0x74, 0x1b, 0xc6, 0x0c, 0xe6, 0x33, 0x58, 0x8c,
        0xf3, 0x4e, 0xbe, 0xa7, 0xdd, 0xbe, 0xea, 0x07,
        0x5d, 0xad, 0xf6, 0xe4, 0x8b, 0x55, 0x69, 0xf8,
        0x7f, 0x42, 0x7a, 0x78, 0xa0, 0x66, 0x6b, 0x29,
        0x10, 0x3b, 0x55, 0xa1, 0x0f, 0x95, 0x90, 0xa9,
        0x41, 0xe5, 0x75, 0x24, 0x16, 0xbd, 0xb1, 0xba,
        0xac, 0x46, 0x9d, 0xe8, 0x7c, 0xe6, 0xe9, 0x07,
        0x4c, 0xbb, 0xef, 0x04, 0x46, 0x2f, 0x42, 0x82,
        0xec, 0xb9, 0xab, 0xf1, 0xec, 0xa6, 0x9d, 0x3c,
        0x29, 0xcb, 0x60, 0xed, 0xb1, 0x91, 0x06, 0x01,
        0xb8, 0x11, 0x0f, 0x74, 0xc2, 0x02, 0x1c, 0x6a,
        0xff, 0xb6, 0x25, 0xb4, 0x05, 0x6c, 0xb8, 0xc5,
        0x00, 0xe4, 0xa0, 0xa2, 0x68, 0xf6, 0x58, 0x64,
        0x67, 0xd6, 0x89, 0xb9, 0x14, 0x5a, 0x24, 0x8b,
        0x61, 0xe8, 0xb7, 0x4c, 0xe7, 0x92, 0x4f, 0x77,
        0xdd, 0x59, 0xb5, 0xe6, 0x40, 0xf2, 0x0a, 0xf7,
        0x30, 0xd7, 0xbf, 0x40, 0xcf, 0xf3, 0x17, 0x9d,
        0xe8, 0x4e, 0x93, 0xb6, 0x47, 0x98, 0xae, 0xae,
        0xfb, 0x26, 0xc2, 0xbb, 0x95, 0x91, 0xca, 0x2d,
        0xff, 0x20, 0xf7, 0x17, 0x51, 0xf6, 0xae, 0x2e,
        0xbb, 0x02, 0xab, 0x61, 0x61, 0xd3, 0x36, 0xef,
        0xa1, 0x7e, 0x5d, 0x6e, 0xb1, 0x63, 0x9e, 0xfc,
        0x24, 0xbf, 0xdf, 0xcb, 0x16, 0xcc
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();
const char* collision_box::fragmentSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x6d, 0x90, 0xc1, 0x4e, 0xc3, 0x40,
        0x0c, 0x44, 0xef, 0xfb, 0x15, 0x73, 0x4c, 0xab,
        0x28, 0x6d, 0x25, 0x38, 0x55, 0xe5, 0x00, 0x12,
        0x1f, 0x80, 0xe0, 0x5c, 0xb9, 0xc9, 0x26, 0xb1,
        0x64, 0xd6, 0x55, 0xb2, 0x09, 0x20, 0xd4, 0x7f,
        0xc7, 0x49, 0x1a, 0x28, 0x50, 0x1f, 0x56, 0xda,
        0xd9, 0xf1, 0xf8, 0xad, 0x5d, 0x4f, 0xcd, 0x07,
        0x87, 0x0a, 0xa5, 0x28, 0x45, 0xf4, 0xfb, 0xa3,
        0x50, 0xee, 0x8b, 0xad, 0xfb, 0xab, 0x07, 0x8d,
        0x2f, 0xed, 0xf0, 0xe0, 0x7a, 0xe5, 0x02, 0xaf,
        0xc4, 0x21, 0x59, 0xe0, 0xd3, 0x39, 0x58, 0x4d,
        0x26, 0x92, 0x63, 0x4d, 0xd8, 0x61, 0x9d, 0xdd,
        0x6e, 0x27, 0x7d, 0xb5, 0xc2, 0x93, 0x2f, 0x4c,
        0xca, 0x55, 0x84, 0x5b, 0xd6, 0x90, 0xa2, 0xe6,
        0xc2, 0x43, 0xe8, 0xe0, 0x65, 0xb4, 0x54, 0xb2,
        0x7f, 0x6c, 0xa8, 0x7a, 0x50, 0xd1, 0xc6, 0x8c,
        0xbd, 0xcf, 0x6f, 0x92, 0x4d, 0xb6, 0x4e, 0x2d,
        0x65, 0x3e, 0xec, 0xba, 0xc0, 0x72, 0x8a, 0xff,
        0x09, 0xbe, 0x97, 0xce, 0x5b, 0x43, 0xd0, 0xcb,
        0xf0, 0x31, 0x17, 0xdc, 0xa2, 0xad, 0xf5, 0xcd,
        0xf0, 0x47, 0x33, 0x97, 0x48, 0xe6, 0x8f, 0xe1,
        0x6e, 0xc0, 0x1b, 0xc0, 0x71, 0xae, 0x6b, 0x00,
        0xbf, 0x66, 0xa7, 0x53, 0xc7, 0x37, 0xc0, 0xd0,
        0x74, 0x72, 0x17, 0xc9, 0xe7, 0xd5, 0xfc, 0x8f,
        0x36, 0xca, 0xe7, 0xda, 0x60, 0x0e, 0xfa, 0x6e,
        0x9c, 0x11, 0x9d, 0xb9, 0x52, 0x94, 0x64, 0x0b,
        0xe0, 0x08, 0xed, 0xe2, 0x75, 0x88, 0xe5, 0x0e,
        0xd9, 0x66, 0x9e, 0x73, 0xfa, 0x02, 0x88, 0x26,
        0x74, 0x25
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();

} // namespace shaders
} // namespace mbgl
