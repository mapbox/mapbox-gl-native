// NOTE: DO NOT CHANGE THIS FILE. IT IS AUTOMATICALLY GENERATED.

#include <mbgl/shaders/raster.hpp>
#include <mbgl/util/compression.hpp>

#include <cstdint>

namespace mbgl {
namespace shaders {

const char* raster::name = "raster";
const char* raster::vertexSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x75, 0x92, 0xcb, 0x4e, 0xc3, 0x40,
        0x0c, 0x45, 0xf7, 0xf9, 0x0a, 0x2f, 0x13, 0x28,
        0x6d, 0x83, 0x00, 0x81, 0x22, 0x96, 0x5d, 0xb0,
        0x41, 0x2c, 0x2a, 0xc1, 0xae, 0x9a, 0x26, 0x4e,
        0x63, 0x69, 0x32, 0x53, 0xe6, 0x51, 0x40, 0x88,
        0x7f, 0xc7, 0x4e, 0x9a, 0x36, 0xe5, 0x91, 0x4d,
        0x24, 0x3f, 0xce, 0xbd, 0xb6, 0x27, 0x1a, 0xaa,
        0xad, 0x6b, 0xa1, 0x55, 0xe1, 0x0a, 0xe2, 0x8a,
        0x7f, 0x8e, 0xde, 0x8b, 0x24, 0xee, 0xc3, 0x3b,
        0x2c, 0x2f, 0x39, 0x1c, 0xf4, 0x6a, 0xab, 0x1c,
        0x9a, 0x70, 0xcc, 0xd4, 0xda, 0xaa, 0xc0, 0x29,
        0x5f, 0x2a, 0x8d, 0xff, 0x66, 0xd7, 0xb1, 0xae,
        0xd1, 0xf5, 0x45, 0x45, 0x92, 0xa8, 0xc0, 0xf8,
        0x75, 0x0c, 0xd8, 0x83, 0xd5, 0x6a, 0x6b, 0x7d,
        0xf1, 0x3b, 0x1a, 0xf0, 0x3d, 0x44, 0x87, 0x7d,
        0x36, 0xd9, 0x29, 0xf7, 0x41, 0x66, 0xd3, 0x27,
        0x77, 0x12, 0x9c, 0x17, 0x7f, 0x04, 0x73, 0x29,
        0xb5, 0x54, 0xf1, 0x28, 0x64, 0xd2, 0x0c, 0x3e,
        0x13, 0xe0, 0x6f, 0xa3, 0x57, 0x4f, 0xd6, 0x53,
        0x20, 0x6b, 0xe0, 0xfe, 0x30, 0x20, 0x9c, 0x49,
        0xe3, 0x55, 0xda, 0x19, 0x98, 0xc0, 0x7c, 0x02,
        0x79, 0x56, 0x74, 0xf5, 0xb3, 0x19, 0x3c, 0x23,
        0xf0, 0x34, 0x10, 0xbd, 0xf0, 0x1f, 0x4c, 0xc8,
        0x6f, 0x80, 0x67, 0x82, 0xbd, 0x29, 0xd8, 0x0e,
        0xb8, 0xd2, 0x5a, 0x57, 0x91, 0x51, 0x01, 0x3d,
        0x04, 0x0b, 0x1b, 0xda, 0x49, 0x13, 0xa0, 0xb1,
        0x71, 0xd3, 0xc0, 0xd6, 0x61, 0x49, 0x5e, 0xea,
        0xb8, 0x79, 0x40, 0xd7, 0x4e, 0x95, 0xd2, 0xab,
        0xf4, 0xb8, 0x7b, 0x2a, 0x92, 0xd1, 0x23, 0xdc,
        0xe6, 0x77, 0x97, 0x82, 0xea, 0xd6, 0x05, 0xa1,
        0xc1, 0x83, 0xe8, 0x58, 0x8b, 0x4c, 0x97, 0xea,
        0x57, 0x3b, 0x90, 0x95, 0x07, 0x65, 0xd8, 0xf7,
        0x9a, 0x82, 0x53, 0x8e, 0xf4, 0x07, 0x34, 0xc4,
        0x2e, 0x4c, 0x6c, 0xd7, 0xe8, 0x84, 0xc9, 0x7e,
        0x3c, 0x3a, 0xb6, 0xa8, 0x2a, 0x7c, 0x8d, 0x0c,
        0x1a, 0x39, 0x7c, 0x6b, 0xd0, 0x00, 0x1f, 0xb0,
        0x42, 0xc7, 0x33, 0x4f, 0x07, 0xe6, 0xb2, 0x21,
        0x56, 0x63, 0xb0, 0xf6, 0xb6, 0x93, 0xf4, 0xaa,
        0xe5, 0x1b, 0x29, 0x1d, 0x51, 0xf4, 0x24, 0xb2,
        0x78, 0x59, 0x2e, 0x1e, 0x97, 0xf0, 0x36, 0x5e,
        0x99, 0x2c, 0xcb, 0x46, 0x16, 0x25, 0x3d, 0xb8,
        0x94, 0xa5, 0x8d, 0x67, 0x98, 0x0c, 0x12, 0x0c,
        0xe6, 0x8b, 0x34, 0x5d, 0x4f, 0x6b, 0x2b, 0xaa,
        0xbb, 0xa3, 0x22, 0x31, 0xdb, 0x89, 0x74, 0x69,
        0x8d, 0x27, 0x1f, 0xf8, 0x6d, 0xf5, 0xae, 0xfa,
        0xf3, 0xf3, 0x25, 0xd3, 0x34, 0x3d, 0x79, 0x27,
        0x30, 0xeb, 0xb6, 0x37, 0x9d, 0x67, 0x70, 0x01,
        0xf3, 0xe9, 0x75, 0xc6, 0x81, 0xd3, 0xe7, 0x07,
        0x19, 0x9c, 0x4b, 0xa6, 0x38, 0x82, 0x72, 0x01,
        0xed, 0x91, 0x67, 0x3f, 0xde, 0xb2, 0x54, 0x9f,
        0x3c, 0xfc, 0xaf, 0xe4, 0x1b, 0x93, 0x50, 0x12,
        0x27
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();
const char* raster::fragmentSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x8d, 0x53, 0x4d, 0x6f, 0x9c, 0x30,
        0x10, 0xbd, 0xf3, 0x2b, 0x46, 0xca, 0x05, 0x12,
        0x87, 0x85, 0xdd, 0xf6, 0x84, 0x52, 0x29, 0xca,
        0x26, 0x52, 0x2f, 0x4d, 0xb5, 0xad, 0xda, 0x23,
        0xf2, 0x82, 0x61, 0x2d, 0x01, 0x5e, 0xd9, 0x86,
        0xec, 0x6e, 0x95, 0xff, 0xde, 0x31, 0x98, 0x8f,
        0xec, 0x47, 0x12, 0x4e, 0xc3, 0xcc, 0xf3, 0x7b,
        0x33, 0xcf, 0xe3, 0xba, 0xe2, 0x99, 0x90, 0x25,
        0x64, 0x85, 0xa0, 0x1a, 0xea, 0x38, 0xa3, 0x29,
        0x8b, 0x75, 0xe4, 0xd4, 0x47, 0x79, 0xb1, 0xa5,
        0x09, 0xd7, 0xfb, 0xb1, 0xa0, 0x68, 0xb9, 0x2d,
        0x98, 0x9c, 0x2f, 0xb1, 0xc8, 0x4b, 0x9a, 0xb3,
        0xe0, 0x9d, 0x5a, 0x18, 0x39, 0x0d, 0x95, 0x7b,
        0x5e, 0xe5, 0xd0, 0xb0, 0x64, 0x0e, 0x4d, 0xbc,
        0x15, 0x2a, 0x38, 0x97, 0x44, 0xe4, 0x89, 0xf6,
        0x5a, 0xf2, 0x7c, 0xa3, 0x2b, 0xa6, 0x54, 0x5c,
        0x88, 0x97, 0xe8, 0xbd, 0xfa, 0x06, 0xa3, 0x33,
        0x0c, 0x8a, 0xea, 0x5a, 0x52, 0xcd, 0x45, 0x85,
        0x03, 0x26, 0x5a, 0xc8, 0x53, 0x92, 0x44, 0x54,
        0x5a, 0x52, 0xa5, 0x4f, 0x00, 0xd8, 0xdb, 0xc2,
        0x50, 0x6c, 0x79, 0x15, 0xbf, 0x30, 0xa3, 0xa4,
        0x50, 0xa1, 0x11, 0x3c, 0x85, 0x92, 0xf2, 0xca,
        0xf5, 0xe0, 0x9f, 0xe3, 0x00, 0x7e, 0xb3, 0x19,
        0x48, 0x46, 0x53, 0xa0, 0x55, 0x0a, 0x89, 0x14,
        0x4a, 0xdd, 0x1a, 0x33, 0x21, 0x11, 0x85, 0x90,
        0x0a, 0x32, 0x29, 0x4a, 0xd0, 0x1b, 0xd6, 0x1e,
        0x6a, 0x31, 0x5b, 0x2a, 0x59, 0xa5, 0x41, 0xf3,
        0x82, 0xa9, 0x96, 0x00, 0x95, 0xbe, 0x74, 0xf0,
        0x00, 0xee, 0x40, 0xb3, 0x1d, 0x36, 0xcd, 0xe6,
        0x4b, 0xb7, 0x37, 0x98, 0x58, 0xdf, 0xbc, 0xe8,
        0x08, 0x1e, 0x9e, 0x83, 0x87, 0x16, 0x1e, 0x5a,
        0x38, 0xcf, 0xc0, 0xed, 0xc8, 0x7d, 0x0a, 0xdf,
        0x20, 0xf0, 0x03, 0xd3, 0x39, 0xd8, 0xcf, 0x56,
        0x64, 0xbe, 0x46, 0xae, 0xc9, 0xcf, 0xac, 0xff,
        0xa1, 0x1d, 0xcb, 0xeb, 0x5b, 0xae, 0xf0, 0x22,
        0x57, 0x38, 0xe5, 0x0a, 0xa7, 0x5c, 0xe1, 0x5b,
        0xae, 0x71, 0x0c, 0x44, 0x97, 0x7c, 0x67, 0x9b,
        0x24, 0x16, 0x4c, 0x86, 0xa5, 0xb4, 0x73, 0xb4,
        0x69, 0x94, 0xbd, 0xbe, 0x9b, 0xae, 0xa5, 0x65,
        0x5a, 0xc0, 0x44, 0xd5, 0x88, 0x46, 0xc3, 0xdd,
        0x98, 0x0b, 0x6c, 0xe3, 0x0e, 0x61, 0xc0, 0xee,
        0xd0, 0x72, 0x2a, 0xb4, 0x8b, 0x79, 0x72, 0x74,
        0xd1, 0xfe, 0x6e, 0x7f, 0xf0, 0xc8, 0x87, 0xa8,
        0xc3, 0x6e, 0xff, 0x09, 0xd4, 0xfe, 0xb0, 0xf3,
        0xbc, 0x49, 0x3f, 0xc3, 0x4e, 0xb6, 0x99, 0x6e,
        0x0f, 0x69, 0xc3, 0x24, 0xde, 0x1d, 0xf6, 0xe7,
        0xda, 0x11, 0xe0, 0xc6, 0x0e, 0x93, 0x0f, 0xd1,
        0xda, 0x43, 0x2b, 0x17, 0x7e, 0x10, 0x0d, 0xe3,
        0xdc, 0x20, 0xbe, 0x3f, 0x7a, 0x6b, 0x32, 0x1e,
        0x5c, 0x9f, 0x5f, 0xfb, 0x5e, 0xbd, 0x5f, 0xf7,
        0x89, 0x23, 0xa6, 0x69, 0x3c, 0x1d, 0xf8, 0x5f,
        0xbb, 0xd3, 0x47, 0x2f, 0x02, 0xe5, 0xb1, 0x34,
        0x32, 0x8c, 0xaf, 0x6e, 0x34, 0xbf, 0x6e, 0x1f,
        0x60, 0x8c, 0x71, 0xef, 0xf0, 0xf1, 0xeb, 0x25,
        0xf0, 0x71, 0xc6, 0x8b, 0xa6, 0x8c, 0x98, 0xb8,
        0x48, 0x68, 0xd4, 0x08, 0x7c, 0x26, 0xd5, 0x1b,
        0x9f, 0x17, 0xf1, 0x13, 0xda, 0xf4, 0x60, 0xf7,
        0xcd, 0x2c, 0x9f, 0x6b, 0x96, 0x6e, 0xec, 0x9c,
        0x8c, 0x9a, 0xa4, 0xb7, 0xd2, 0xee, 0x1c, 0xe9,
        0x03, 0xc3, 0x76, 0xc5, 0xb3, 0x94, 0x65, 0xf0,
        0xfc, 0xe7, 0x71, 0xb5, 0x5c, 0xdd, 0xff, 0x8d,
        0xbf, 0xff, 0xf8, 0xf5, 0xf3, 0xf1, 0xe1, 0xf7,
        0xf3, 0xea, 0xa2, 0x4e, 0xe8, 0x9b, 0xa7, 0x7b,
        0xc5, 0xaa, 0x94, 0x67, 0xce, 0xab, 0xf3, 0x1f,
        0x04, 0xbd, 0xc0, 0x04
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();

} // namespace shaders
} // namespace mbgl
