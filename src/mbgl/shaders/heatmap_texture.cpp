// NOTE: DO NOT CHANGE THIS FILE. IT IS AUTOMATICALLY GENERATED.

#include <mbgl/shaders/heatmap_texture.hpp>
#include <mbgl/util/compression.hpp>

#include <cstdint>

namespace mbgl {
namespace shaders {

const char* heatmap_texture::name = "heatmap_texture";
const char* heatmap_texture::vertexSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x4d, 0x8d, 0x41, 0x0a, 0x83, 0x30,
        0x10, 0x45, 0xf7, 0x73, 0x8a, 0x59, 0x6a, 0xb1,
        0xa2, 0xc5, 0x5d, 0xe8, 0x1d, 0x7a, 0x83, 0x90,
        0x56, 0x2b, 0x03, 0x9a, 0x94, 0x98, 0x44, 0x43,
        0xe9, 0xdd, 0x3b, 0x9a, 0x50, 0x3a, 0x9b, 0x99,
        0x79, 0x9f, 0xff, 0xbf, 0xd7, 0xf4, 0x34, 0x76,
        0xc6, 0x59, 0xb9, 0x0e, 0xbd, 0xe4, 0x65, 0x69,
        0x13, 0xe0, 0x33, 0x0e, 0xc3, 0xe3, 0xc2, 0x78,
        0x35, 0x76, 0xea, 0x05, 0x28, 0xc7, 0xea, 0xdd,
        0xbb, 0x21, 0x71, 0x25, 0x5f, 0x66, 0x11, 0x10,
        0x94, 0x8d, 0xa4, 0xc7, 0xc4, 0x42, 0x62, 0x10,
        0x0c, 0xf5, 0x1c, 0x4a, 0xba, 0x28, 0xf1, 0x0d,
        0xc8, 0x33, 0x4e, 0xf2, 0x66, 0x16, 0x72, 0x64,
        0x34, 0x5e, 0x7f, 0x55, 0x78, 0xda, 0x7d, 0x5d,
        0x71, 0x64, 0xf1, 0x93, 0xbb, 0x2a, 0x6c, 0x2a,
        0x6c, 0x4b, 0x0e, 0xda, 0xad, 0x47, 0x68, 0xbd,
        0xb1, 0x4d, 0xa5, 0x4b, 0xfc, 0xe1, 0xc8, 0xb8,
        0xad, 0x1b, 0x3c, 0x67, 0x31, 0x0a, 0xf8, 0xc0,
        0x17, 0xe6, 0x77, 0x44, 0xb1
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();
const char* heatmap_texture::fragmentSource = [] () {
    static const uint8_t compressed[] = {
        0x78, 0xda, 0x6d, 0x8e, 0x41, 0x0b, 0x82, 0x40,
        0x14, 0x84, 0xef, 0xfb, 0x2b, 0x1e, 0x78, 0xd1,
        0x10, 0x11, 0xa9, 0x93, 0x74, 0x08, 0x35, 0xe8,
        0x92, 0x61, 0x51, 0xc7, 0x65, 0xd1, 0xdd, 0x65,
        0x41, 0x5d, 0x59, 0x57, 0x49, 0xa2, 0xff, 0xde,
        0xa6, 0x82, 0x11, 0xbe, 0xe3, 0x9b, 0xf9, 0x66,
        0xa6, 0xab, 0x05, 0x93, 0xaa, 0x82, 0x96, 0x54,
        0x4d, 0x49, 0x55, 0x10, 0x43, 0x87, 0x45, 0x45,
        0x38, 0x0d, 0x51, 0xb7, 0x22, 0xe5, 0xb2, 0x94,
        0x0a, 0x2b, 0xf3, 0x59, 0x74, 0x56, 0x4a, 0xa2,
        0x8d, 0x26, 0x1b, 0x92, 0x0b, 0x3d, 0x84, 0xa8,
        0x27, 0x6a, 0x10, 0x35, 0x87, 0x9e, 0xe6, 0x01,
        0xf4, 0xb8, 0x91, 0x6d, 0x88, 0x50, 0x2f, 0x45,
        0x01, 0x15, 0x11, 0xb5, 0xed, 0xc0, 0x0b, 0x81,
        0xb9, 0x89, 0xd3, 0xb0, 0x07, 0x4d, 0x9f, 0xba,
        0x53, 0x34, 0x88, 0xed, 0xb9, 0xdc, 0x9d, 0x30,
        0xc7, 0x53, 0xe1, 0x68, 0x35, 0x49, 0x5b, 0x18,
        0xbb, 0xff, 0xdc, 0xcb, 0x1e, 0x77, 0xac, 0xb3,
        0xb5, 0x0b, 0xbe, 0xb7, 0x73, 0x9c, 0x89, 0xe3,
        0x25, 0x3e, 0x2a, 0xc2, 0xa3, 0x99, 0x9c, 0x12,
        0x36, 0xbf, 0x5b, 0x91, 0x25, 0x58, 0x41, 0x19,
        0xa4, 0xf7, 0x24, 0x8b, 0xb3, 0xc3, 0x03, 0x9f,
        0xce, 0xd7, 0x4b, 0x12, 0xdd, 0xd2, 0x6c, 0x2d,
        0xe0, 0xbb, 0xc3, 0xf6, 0x3d, 0xdf, 0xc4, 0x5b,
        0xb4, 0x2e, 0x04, 0x43, 0x6f, 0xf4, 0x01, 0x73,
        0x71, 0x68, 0xaa
    };
    static std::string decompressed = util::decompress(std::string(reinterpret_cast<const char*>(compressed), sizeof(compressed)));
    return decompressed.c_str();
}();

} // namespace shaders
} // namespace mbgl
