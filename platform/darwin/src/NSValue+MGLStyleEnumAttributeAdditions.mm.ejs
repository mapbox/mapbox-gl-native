// This file is generated.
// Edit platform/darwin/scripts/generate-style-code.js, then run `make style-code-darwin`.
<%
const type = locals.type;
const layoutProperties = locals.layoutProperties;
const paintProperties = locals.paintProperties;
-%>

#import "NSValue+MGLStyleEnumAttributeAdditions.h"

@implementation NSValue (MGLStyleEnumAttributeAdditions)

<% if (layoutProperties.length) { -%>
<% for (const property of layoutProperties) { -%>
<% if (property.type == "enum") { -%>
+ (NSValue *)valueWithMGL<%- camelize(property.name) %>:(MGL<%- camelize(property.name) %>)<%- objCName(property) %> {
    return [NSValue value:&<%- objCName(property) %> withObjCType:@encode(MGL<%- camelize(property.name) %>)];
}

- (MGL<%- camelize(property.name) %>)<%- objCName(property) %> {
    MGL<%- camelize(property.name) %> value;
    [self getValue:&value];
    return value;
}

<% } -%>
<% } -%>
<% } -%>
<% if (paintProperties.length) { -%>
<% for (const property of paintProperties) { -%>
<% if (property.type == "enum") { -%>
+ (NSValue *)valueWithMGL<%- camelize(property.name) %>:(MGL<%- camelize(property.name) %>)<%- objCName(property) %> {
return [NSValue value:&<%- objCName(property) %> withObjCType:@encode(MGL<%- camelize(property.name) %>)];
}

- (MGL<%- camelize(property.name) %>)<%- objCName(property) %> {
    MGL<%- camelize(property.name) %> value;
    [self getValue:&value];
    return value;
}

<% } -%>
<% } -%>
<% } -%>

@end
