<%
  const os = locals.os;
  const iOS = os === 'iOS';
  const macOS = os === 'macOS';
  const cocoaPrefix = iOS ? 'UI' : 'NS';
  const guide = 'MigratingToExpressions';
-%>
<!--
  This file is generated.
  Edit platform/darwin/scripts/generate-style-code.js, then run `make darwin-style-code`.
-->

# Migrating from Style Functions to Expressions

[Runtime Styling](runtime-styling.html) enables you to modify every aspect of the map’s appearance dynamically as a user interacts with your application. Users can specify in advance how a layout or paint attribute will vary as the zoom level changes or how the appearance of individual features vary based on metadata provided by a content source. With Maps SDK of iOS v4.0.0, style functions have been replaced with expressions. These provide even more tools for users who want to style their maps dynamically. This guide outlines some tips for migrating from style functions to expressions, and offers an overview of some things that users can do with expressions.

An expression is represented at runtime by the `NSExpression` class. Expressions can be used to style paint and layout properties based on zoom level, data attributes, or a combination of the two.

A constant expression can also be assigned to a style property. For example, the opacity of a fill style layer can be set to a constant value between 0 and 1.

The documentation for each individual style layer property notes which non-constant expressions are enabled for that property.

Style functions supported four interpolation modes: exponential, interval, categorical, and identity. This guide uses earthquake data from the [U.S. Geological Survey](https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php. Under each interpolation mode, the style function implementation will be shown, followed by the current syntax.

For more information about how to work with GeoJSON data in our iOS SDK, please see our [working with GeoJSON data](working-with-geojson-data.html) guide. To learn more about supported expressions, see our [Predicates and Expressions](predicates-and-expressions.html) guide. The Predicates and Expressions guide also outlines Mapbox custom functions that can be used to dynamically style a map.

Mapbox supports some convenience methods that can be used in the place of format string syntax.

## Stops
Stops are dictionary keys that are associated with layer attribute values. You can use feature attribute values, zoom levels, and heatmap point density as keys, with an constant value or expression for the value. For example, you can use a stop dictionary with the zoom levels 0, 10, and 20 as keys and the colors yellow, orange, and red as the values. Constant values no longer need to be wrapped as style values.

<%- guideExample(guide, 'Stops', os) %>


## Interpolation mode

Style functions supported four interpolation modes: exponential/linear, interval, categorical, and identity. For more information about

### Linear

Previously, exponential interpolation mode handled both linear and exponential interpolation. These have been separated in v4.0.0. `mgl_interpolate:withCurveType:parameters:stops:` is a custom function that takes the interpolation type as a parameter. If you previously used the default interpolation base, use curve type `'linear'`.
The stops dictionary below, for example, shows colors that continuously shift from yellow to orange to red to blue to white based on the attribute value.
<%- guideExample(guide, 'Linear', os) %>

![exponential mode](img/data-driven-styling/linear.png)

### Exponential

If you previously used an interpolation base greater than `0` (other than `1`), you can use `'exponential'` as the curve type for `mgl_interpolate:withCurveType:parameters:stops:`. The `parameters` argument takes that interpolation base. This interpolates between values exponentially, creating an accelerated ramp effect.

Here’s a visualization from Mapbox Studio (see [Working with Mapbox Studio](working-with-mapbox-studio.html)) comparing interpolation base values of `1.5` and `0.5` based on zoom. In order to convert camera style functions, use `$zoomLevel` or `MGL_FUNCTION('zoomLevel')` as the attribute key.

<img src="img/data-driven-styling/exponential-function.png" height=344/>
<img src="img/data-driven-styling/exponential-function-1.png" height=344/>

The example below increases a layer’s `circleRadius` exponentially based on a map’s zoom level. The interpolation base is `1.5`.
<%- guideExample(guide, 'Exponential', os) %>

### Interval

Steps, or intervals, create a range using the keys from the stops dictionary. The range is from the given key to just less than the next key. The attribute values that fall into that range are then styled using the layout or paint value assigned to that key. You can use the format string `'mgl_step:from:stops:'` for cases where you previously used interval interpolation mode. The first parameter takes the feature attribute name and the second parameter (`from:`) optionally takes the default or fallback value for that function. The final parameter takes a stops dictionary as an argument.

When we use the stops dictionary given above with an `'mgl_step:from:stops:'`, we create ranges where earthquakes with a magnitude of 0 to just less than 2.5 would be yellow, 2.5 to just less than 5 would be orange, and so on.
<%- guideExample(guide, 'Interval', os) %>

![interval mode](img/data-driven-styling/interval.png)

### Categorical

Categorical interpolation mode took a stops dictionary. If the value for a specified feature attribute name matched one in that stops dictionary, the style value for that attribute value would be used. Categorical style functions can now be replaced with `MGL_MATCH()`.

`MGL_MATCH` takes an initial condition, which in this case is an attribute key. This is follow by possible matches for that key and the value to assign to the layer property if there is a match. The final argument can be a default style value that is to be used if none of the specified values match.

There are three main types of events in the USGS dataset: earthquakes, explosions, and quarry blasts. In this case, the color of the circle layer will be determined by the type of event, with a default value of blue to catch any events that do not fall into any of those categories.

<%- guideExample(guide, 'Categorical', os) %>

![categorical mode](img/data-driven-styling/categorical1.png) ![categorical mode](img/data-driven-styling/categorical2.png)

### Identity

Identity interpolation mode used the attribute’s value as the style layer property value. In this example, you might set the `circleRadius` to the earthquake’s magnitude. In order to use a feature attribute value to style a layer property, set the property value to `[NSExpression expressionForKeyPath:]`, which take the feature attribute name as an argument.

<%- guideExample(guide, 'Identity', os) %>

![identity mode](img/data-driven-styling/identity.png)

Some built-in functions can be applied to attribute values to style layer property values. To set the circle radius to 3 times the earthquake’s magnitude, create a `multiply:by` function that takes the attribute value and the multiplier as arguments.

<%- guideExample(guide, 'Multiply', os) %>

![multiply magnitude](img/data-driven-styling/multiply.png)

You can also cast attribute values in order to use them. One example is to cast an integer as an `NSString` and use it as a text value.

<%- guideExample(guide, 'Cast', os) %>

![cast a value](img/data-driven-styling/cast.png)

### Constant Values
<% if (iOS) { -%>

For constant values that do not necessarily change based on camera or attribute values, use `[NSExpression expressionForConstantValue:]` (previously `[MGLStyleValue valueWithRawValue:]`).

  <% } -%>

## Resources

* [USGS](https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php)
* [For Style Authors](for-style-authors.html)
* [Predicates and Expressions](predicates-and-expressions.html)
