import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import org.ajoberstar.grgit.*

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'org.ajoberstar:gradle-git:1.2.0'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'

allprojects {
    group project.GROUP
    version project.VERSION_NAME

    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'commons-validator:commons-validator:1.4.1'
    compile 'com.android.support:support-annotations:22.1.1'
    compile 'com.android.support:support-v4:22.1.1'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_MIN_SDK)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)

        ndk {
            moduleName "libmapbox-gl"
        }
    }

    repositories {
        mavenCentral()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
        disable 'InvalidPackage'
    }

    buildTypes {
        debug {
            jniDebuggable true
        }

        release {
            minifyEnabled false
            jniDebuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

configurations {
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'commons-collections', module: 'commons-collections'
}


android.libraryVariants.all { variant ->
    def name = variant.name
    task "javadoc$name"(type: Javadoc) {
        description = "Generates javadoc for build $name"
        failOnError = false
        destinationDir = new File(destinationDir, variant.baseName)
        source = files(variant.javaCompile.source)
        classpath = files(variant.javaCompile.classpath.files) + files(android.bootClasspath)
        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.links("http://d.android.com/reference/")
        exclude '**/R.html', '**/R.*.html'
    }
}

checkstyle {
    configFile project.file('../checks.xml')
    showViolations true
}

/*
task cleanJNIBuilds {
    def jniLibsDir = new File("MapboxGLAndroidSDK/src/main/jniLibs")
    delete jniLibsDir.absolutePath
}
*/

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
    checkstyle.dependsOn variant.javaCompile
    checkstyle.source variant.javaCompile.source
    checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
    checkstyle.exclude('**/BuildConfig.java')
    checkstyle.exclude('**/R.java')
    checkstyle.exclude('**/com/almeros/android/multitouch/**')
    project.tasks.getByName("check").dependsOn checkstyle
}

// From https://raw.github.com/mcxiaoke/gradle-mvn-push/master/jar.gradle
android.libraryVariants.all { variant ->
    def jarTask = project.tasks.create(name: "jar${variant.name.capitalize()}", type: Jar) {
        from variant.javaCompile.destinationDir
        exclude "**/R.class"
        exclude "**/BuildConfig.class"
    }
    jarTask.dependsOn variant.javaCompile
    artifacts.add('archives', jarTask);
}

// From https://raw.github.com/mcxiaoke/gradle-mvn-push/master/gradle-mvn-push.gradle
def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
            "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
            "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('USERNAME') ? USERNAME :
            (hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : "")
}

def getRepositoryPassword() {
    return hasProperty('PASSWORD') ? PASSWORD :
            (hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : "")
}


task setupCoreGL() {

    // Copy Assets
    // ===========
    def assetsDir = new File(project.projectDir, "src/main/assets")
    if (assetsDir.exists()) {
        println("assets directory previously existed, so delete it to start fresh")
        assetsDir.deleteDir();
    }

    // Make Assets
    if (!assetsDir.mkdirs()) {
        println("failed to make assets folder")
    }
    println("assetsDir " + assetsDir + " is ready to go.")

    // Copy Certificates
    String commonDirPath = project.rootDir
    commonDirPath = commonDirPath.substring(0, commonDirPath.lastIndexOf("android")) + "common"

    copy {
        from commonDirPath
        into assetsDir
        include '**.crt'
    }

    // Copy Styles
    String stylesDirPath = project.rootDir
    stylesDirPath = stylesDirPath.substring(0, stylesDirPath.lastIndexOf("android")) + "styles" + File.separator + "styles"

    copy {
        from stylesDirPath
        into assetsDir
        include '**.**'
    }

    // Copy JNI
    // ========
    def jniDir = new File(project.projectDir, "src/main/jni")
//    println("jniDir: " + jniDir)

    // Copy C++ Files
    // https://github.com/mapbox/mapbox-gl-native/blob/3396bcaaac5d317ee35b4cc2433663e3eb4b355d/android/mapboxgl-app.gyp#L11-L16

    // Symlink Core GL C++
    String coreDirPath = project.rootDir
    coreDirPath = coreDirPath.substring(0, coreDirPath.lastIndexOf("android")) + "src"

    String cgl = jniDir.absolutePath + File.separator + "coregl"

    Path cglPath = Paths.get(cgl)
    Path cdPath = Paths.get(coreDirPath)

    if (Files.exists(cglPath)) {
        Files.delete(cglPath)
        println("Removed cglPath as it had already existed.")
    }
    Files.createSymbolicLink(cglPath, cdPath)

    // Symlink Platform C++
    String platformDirPath = project.rootDir
    platformDirPath = platformDirPath.substring(0, platformDirPath.lastIndexOf("android")) + "platform"
    String defaultDirPath = platformDirPath + File.separator + "default"
    String androidDirPath = platformDirPath + File.separator + "android"
    Path ddPath = Paths.get(defaultDirPath)
    Path adPath = Paths.get(androidDirPath)

    String platgl = jniDir.absolutePath + File.separator + "platformgl"
    String defaultgl = platgl + File.separator + "default"
    String androidgl = platgl + File.separator + "android"
    Path pglPath = Paths.get(platgl)
    Path dglPath = Paths.get(defaultgl)
    Path aglPath = Paths.get(androidgl)

    if (Files.exists(pglPath)) {
        if (Files.exists(dglPath)) {
            Files.delete(dglPath)
        }
        if (Files.exists(aglPath)) {
            Files.delete(aglPath)
        }
        Files.delete(pglPath)
        println("Removed pglPath as it had already existed.")
    }
    Files.createDirectory(pglPath)
    Files.createSymbolicLink(dglPath, ddPath)
    Files.createSymbolicLink(aglPath, adPath)
}

task installMason() {
    String masonDirString = project.buildDir.absolutePath + File.separator + "mason"
    Path masonDirPath = Paths.get(masonDirString)
    if (Files.exists(masonDirPath)) {
        println("Mason already installed.")
        return ;
    }

    def grgit = Grgit.clone(dir: masonDirString, uri: 'git@github.com:mapbox/mason.git')
    println("Mason installed")
}

task installJNILibs(dependsOn: 'installMason') {

    exec {
        workingDir = project.buildDir.absolutePath + File.separator + "mason"
        executable = './mason'
    }
}

task apklib(type: Zip) {
    appendix = extension = 'apklib'

    from 'AndroidManifest.xml'
    into('res') {
        from 'res'
    }
    into('src') {
        from 'src'
    }
}

artifacts {
    archives apklib
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(),
                            password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(),
                            password: getRepositoryPassword())
                }

/*
                // Leaving out as artifact was incorrectly named when found
                addFilter('aar') { artifact, file ->
                    artifact.name == archivesBaseName
                }
                addFilter('apklib') { artifact, file ->
                    artifact.name == archivesBaseName + '-apklib'
                }
*/

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.sourceFiles
        classpath = files(android.bootClasspath)
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
